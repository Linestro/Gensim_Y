/*
RISC-V
*/
AC_ARCH(riscv32)
{

	ac_mem Mem(4, 4, little, 1);

	// General Purpose Registers
	ac_regspace(128) {
		// bank NAME (TYPE, OFFSET, COUNT, REG-STRIDE, # ELEMS, ELEM-SIZE, ELEM-STRIDE)
	
		bank GPR (uint32, 0, 32, 4, 1, 4, 4);
		slot SP (uint32, 4, 8) SP; // TODO: find out the real offset of the stack pointer
	}

	ac_regspace(4) {
		slot PC (uint32, 4, 0) PC;
	}

	ac_regspace(4) {
		slot T (uint8, 1, 0) T;
	}

	ac_regspace(256) {
		bank FP_D(double, 0, 32, 8, 1, 8, 8);
		bank FP_S(float,  0, 32, 8, 1, 4, 4);
	}

	ac_regspace(6) {
		slot FRM (uint8, 1, 0);
		slot FLAG_NV (uint8, 1, 1);
		slot FLAG_DZ (uint8, 1, 2);
		slot FLAG_OF (uint8, 1, 3);
		slot FLAG_UF (uint8, 1, 4);
		slot FLAG_NX (uint8, 1, 5);
	}


	// CSRs
	ac_regspace(104) {
		slot MCAUSE(uint64, 8, 0);
		slot MEPC(uint64, 8, 8);
		slot MTVAL(uint64, 8, 16);
		slot MTVEC(uint64, 8, 24);
		slot MIDELEG(uint64, 8, 32);
		slot MEDELEG(uint64, 8, 40);
		
		slot SSTATUS(uint64, 8, 48);
		slot SEDELEG(uint64, 8, 56);
		slot SIDELEG(uint64, 8, 64);
		slot SIE(uint64, 8, 72);
		slot STVEC(uint64, 8, 80);
		slot SCOUNTEREN(uint64, 8, 88);
		
		slot SATP(uint64, 8, 96);
	}

	ac_regspace(4) {
		slot LLSC_MONITOR(uint32, 4, 0);
	}

	ac_regspace(1) {
		slot MACHMODE (uint8, 1, 0);
	}
	
	ac_wordsize 32;

	ARCH_CTOR(riscv) {
		ac_isa("riscv32/riscv32_isa.ac");
		set_endian("little");
		set_typename(word_t, uint32);
		set_typename(sword_t, sint32);
		
		set_typename(xword_t, uint64);
		set_typename(xsword_t, sint64);
		
		set_constant(WordSize, uint8, 32);
	};
};
