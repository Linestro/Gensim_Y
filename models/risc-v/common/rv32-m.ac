AC_ISA(riscv) 
{
	ac_format Type_MR = "%funct7:7 %rs2:5 %rs1:5 %funct3:3 %rd:5 %opcode:7";
	
	ac_instr<Type_MR> mul, mulh, mulhsu, mulhu, div, divu, rem, remu;	
	//ac_instr<Type_R> divu;
	
	ac_behaviour mul;
	ac_behaviour mulh;
	ac_behaviour mulhsu;
	ac_behaviour mulhu;
	ac_behaviour div;
	ac_behaviour divu;
	ac_behaviour rem;
	ac_behaviour remu;
	
	ISA_CTOR(riscv)
	{
		ac_execute("common/execute.rv32-m");
	
		mul.set_decoder(funct7=0x01, funct3=0x0, opcode=0x33);
		mul.set_asm("mul %reg, %reg, %reg", rd, rs1, rs2);
		mul.set_behaviour(mul);

		mulh.set_decoder(funct7=0x01, funct3=0x1, opcode=0x33);
		mulh.set_asm("mulh %reg, %reg, %reg", rd, rs1, rs2);
		mulh.set_behaviour(mulh);

		mulhsu.set_decoder(funct7=0x01, funct3=0x2, opcode=0x33);
		mulhsu.set_asm("mulhsu %reg, %reg, %reg", rd, rs1, rs2);
		mulhsu.set_behaviour(mulhsu);

		mulhu.set_decoder(funct7=0x01, funct3=0x3, opcode=0x33);
		mulhu.set_asm("mulhu %reg, %reg, %reg", rd, rs1, rs2);
		mulhu.set_behaviour(mulhu);

		div.set_decoder(funct7=0x01, funct3=0x4, opcode=0x33);
		div.set_asm("div %reg, %reg, %reg", rd, rs1, rs2);
		div.set_behaviour(div);

		divu.set_decoder(funct7=0x01, funct3=0x5, opcode=0x33);
		divu.set_asm("divu %reg, %reg, %reg", rd, rs1, rs2);
		divu.set_behaviour(divu);

		rem.set_decoder(funct7=0x01, funct3=0x6, opcode=0x33);
		rem.set_asm("rem %reg, %reg, %reg", rd, rs1, rs2);
		rem.set_behaviour(rem);

		remu.set_decoder(funct7=0x01, funct3=0x7, opcode=0x33);
		remu.set_asm("remu %reg, %reg, %reg", rd, rs1, rs2);
		remu.set_behaviour(remu);
	};
};
