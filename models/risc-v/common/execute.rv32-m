
execute(mul)
{
	typename sword_t rs1 = read_gpr(inst.rs1);
	typename sword_t rs2 = read_gpr(inst.rs2);

	typename sword_t val = rs1 * rs2;	

	write_register_bank(GPR, inst.rd, val);

}

execute(mulh)
{
	typename xsword_t rs1 = read_gpr(inst.rs1);
	typename xsword_t rs2 = read_gpr(inst.rs2);

	typename xsword_t mul = rs1 * rs2;

	typename sword_t val = mul >> WordSize;

	write_register_bank(GPR, inst.rd, val);

}

execute(mulhsu)
{
	typename xsword_t rs1 = read_gpr(inst.rs1);
	typename xword_t rs2 = read_gpr(inst.rs2);

	typename xsword_t mul = rs1 * rs2;

	typename sword_t val = mul >> WordSize;

	write_register_bank(GPR, inst.rd, val);
}

execute(mulhu)
{
	typename xword_t rs1 = read_gpr(inst.rs1);
	typename xword_t rs2 = read_gpr(inst.rs2);

	typename xword_t mul = rs1 * rs2;

	typename word_t  val = mul >> WordSize;

	write_register_bank(GPR, inst.rd, val);

}

execute(div)
{
	typename word_t rs1 = read_gpr(inst.rs1);
	typename word_t rs2 = read_gpr(inst.rs2);

	typename word_t val;

	if (rs2 == 0) {
		val = -1;
	} else if ((rs1 == 0x80000000) && (rs2 == 0xffffffff)) {
		val = 0x80000000;
	} else {
		val = (typename sword_t)rs1 / (typename sword_t)rs2;
	}

	write_register_bank(GPR, inst.rd, val);

}

execute(divu)
{
	typename word_t rs1 = read_gpr(inst.rs1);
	typename word_t rs2 = read_gpr(inst.rs2);

	typename word_t val;

	if (rs2 == 0) {
		val = 0xffffffff;
	} else {
		val = rs1 / rs2;
	}

	write_register_bank(GPR, inst.rd, val);

}

execute(rem)
{
	typename sword_t rs1 = read_gpr(inst.rs1);
	typename sword_t rs2 = read_gpr(inst.rs2);

	typename sword_t val;

	if (rs2 == 0) {
		val = rs1;
	} else if ((rs1 == (-2)^31) && (rs2 == -1)) {
		val = 0;
	} else {
		typename sword_t quotient = rs1/rs2;
		val = rs1 - rs2 * quotient;
	}

	write_register_bank(GPR, inst.rd, val);

}

execute(remu)
{
	typename word_t rs1 = read_gpr(inst.rs1);
	typename word_t  rs2 = read_gpr(inst.rs2);

	typename word_t  val;

	if (rs2 == 0) {
		val = rs1;
	} else {
		val = rs1 % rs2;
	}

	write_register_bank(GPR, inst.rd, val);

}
