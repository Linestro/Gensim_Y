AC_ISA(rv64a) 
{
	ac_format Type_LS64A = "%funct5:5 %aq:1 %rl:1 %rs2:5 %rs1:5 %funct3:3 %rd:5 %opcode:7";
	
	ac_instr<Type_LS64A> lr_d, sc_d;
	ac_instr<Type_LS64A> amoswapd, amoaddd, amoandd, amoord, amoxord, amomaxd, amomaxud, amomind, amominud;

	ac_behaviour lr_d;
	ac_behaviour sc_d;
	
	ac_behaviour amoswapd, amoaddd, amoandd, amoord, amoxord, amomaxd, amomaxud, amomind, amominud;

	ISA_CTOR(riscv)
	{
		ac_execute("common/execute.rv64-a");
	
		lr_d.set_decoder(funct5=0x02, funct3=0x3, opcode=0x2f);
		lr_d.set_asm("lr_d %imm, %imm, %reg, %reg", aq, rl, rd, rs1, rs2=0);
		lr_d.set_behaviour(lr_d);

		sc_d.set_decoder(funct5=0x03, funct3=0x3, opcode=0x2f);
		sc_d.set_asm("sc_d %imm, %imm, %reg, %reg, %reg", aq, rl, rd, rs1, rs2);
		sc_d.set_behaviour(sc_d);
	
		amoswapd.set_decoder(funct5=1, opcode=0x2f);
		amoaddd.set_decoder(funct5=0, opcode=0x2f);
		amoxord.set_decoder(funct5=4, opcode=0x2f);
		amoandd.set_decoder(funct5=0xc, opcode=0x2f);
		amoord.set_decoder(funct5=0x8, opcode=0x2f);
		amomind.set_decoder(funct5=0x10, opcode=0x2f);
		amomaxd.set_decoder(funct5=0x14, opcode=0x2f);
		amominud.set_decoder(funct5=0x18, opcode=0x2f);
		amomaxud.set_decoder(funct5=0x1c, opcode=0x2f);
	
	};
};
