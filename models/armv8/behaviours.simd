/*
 * GenSim AARCH64 Model
 *
 * Copyright (C) University of Edinburgh 2017.  All Rights Reserved.
 *
 * Tom Spink <tspink@inf.ed.ac.uk>
 */
 
decode(SIMD_COPY)
{
	if (((imm5 & 1) == 1) && Q == 0) {
		arrangement = 0;							// 8B
	} else if (((imm5 & 1) == 1) && Q == 1) {
		arrangement = 1;							// 16B
	} else if (((imm5 & 3) == 2) && Q == 0) {
		arrangement = 2;							// 4H
	} else if (((imm5 & 3) == 2) && Q == 1) {
		arrangement = 3;							// 8H
	} else if (((imm5 & 7) == 4) && Q == 0) {
		arrangement = 4;							// 2S
	} else if (((imm5 & 7) == 4) && Q == 1) {
		arrangement = 5;							// 4S
	} else if (((imm5 & 15) == 8) && Q == 1) {
		arrangement = 6;							// 2D
	}
	
	if ((imm5 & 1) == 1) {
		width = 32;
		size = 0;
	} else if ((imm5 & 3) == 2) {
		width = 32;
		size = 1;
	} else if ((imm5 & 7) == 4) {
		width = 32;
		size = 2;
	} else if ((imm5 & 15) == 8) {
		width = 64;
		size = 3;
	}
	
	eindex = imm5 >> (size + 1);
	eindex2 = imm4 >> (size);
}

decode(SIMD_ACROSS_LANES)
{
	if (size == 0 && Q == 0) {
		arrangement = 0;							// 8B
	} else if (size == 0 && Q == 1) {
		arrangement = 1;							// 16B
	} else if (size == 1 && Q == 0) {
		arrangement = 2;							// 4H
	} else if (size == 1 && Q == 1) {
		arrangement = 3;							// 8H
	} else if (size == 2 && Q == 0) {
		arrangement = 4;							// 2S
	} else if (size == 2 && Q == 1) {
		arrangement = 5;							// 4S
	} else if (size == 3 && Q == 1) {
		arrangement = 6;							// 2D
	}
}

decode(SIMD_THREE_SAME)
{
	if (size == 0 && Q == 0) {
		arrangement = 0;							// 8B
	} else if (size == 0 && Q == 1) {
		arrangement = 1;							// 16B
	} else if (size == 1 && Q == 0) {
		arrangement = 2;							// 4H
	} else if (size == 1 && Q == 1) {
		arrangement = 3;							// 8H
	} else if (size == 2 && Q == 0) {
		arrangement = 4;							// 2S
	} else if (size == 2 && Q == 1) {
		arrangement = 5;							// 4S
	} else if (size == 3 && Q == 1) {
		arrangement = 6;							// 2D
	}
}

decode(SIMD_TWO_REG_MISC)
{
	if (size == 0 && Q == 0) {
		arrangement = 0;							// 8B
	} else if (size == 0 && Q == 1) {
		arrangement = 1;							// 16B
	} else if (size == 1 && Q == 0) {
		arrangement = 2;							// 4H
	} else if (size == 1 && Q == 1) {
		arrangement = 3;							// 8H
	} else if (size == 2 && Q == 0) {
		arrangement = 4;							// 2S
	} else if (size == 2 && Q == 1) {
		arrangement = 5;							// 4S
	} else if (size == 3 && Q == 1) {
		arrangement = 6;							// 2D
	}
}

decode(SIMD_PERMUTE)
{
	if (size == 0 && Q == 0) {
		arrangement = 0;							// 8B
		elemcnt = 8;
		elemsize = 1;
	} else if (size == 0 && Q == 1) {
		arrangement = 1;							// 16B
		elemcnt = 16;
		elemsize = 1;
	} else if (size == 1 && Q == 0) {
		arrangement = 2;							// 4H
		elemcnt = 4;
		elemsize = 2;
	} else if (size == 1 && Q == 1) {
		arrangement = 3;							// 8H
		elemcnt = 8;
		elemsize = 2;
	} else if (size == 2 && Q == 0) {
		arrangement = 4;							// 2S
		elemcnt = 2;
		elemsize = 4;
	} else if (size == 2 && Q == 1) {
		arrangement = 5;							// 4S
		elemcnt = 4;
		elemsize = 4;
	} else if (size == 3 && Q == 1) {
		arrangement = 6;							// 2D
		elemcnt = 2;
		elemsize = 8;
	}
}

decode(SIMD_LS_MULT)
{
	if (size == 0 && Q == 0) {
		arrangement = 0;							// 8B
		elemcnt = 8;
		elemsize = 1;
	} else if (size == 0 && Q == 1) {
		arrangement = 1;							// 16B
		elemcnt = 16;
		elemsize = 1;
	} else if (size == 1 && Q == 0) {
		arrangement = 2;							// 4H
		elemcnt = 4;
		elemsize = 2;
	} else if (size == 1 && Q == 1) {
		arrangement = 3;							// 8H
		elemcnt = 8;
		elemsize = 2;
	} else if (size == 2 && Q == 0) {
		arrangement = 4;							// 2S
		elemcnt = 2;
		elemsize = 4;
	} else if (size == 2 && Q == 1) {
		arrangement = 5;							// 4S
		elemcnt = 4;
		elemsize = 4;
	} else if (size == 3 && Q == 1) {
		arrangement = 6;							// 2D
		elemcnt = 2;
		elemsize = 8;
	}
	
	if (opcode == 2 || opcode == 0) {
		regcnt = 4;
	} else if (opcode == 6 || opcode == 4) {
		regcnt = 3;
	} else if (opcode == 7) {
		regcnt = 1;
	} else if (opcode == 10 || opcode == 8) {
		regcnt = 2;
	}
}

decode(SIMD_LS_MULT_PI)
{
	if (size == 0 && Q == 0) {
		arrangement = 0;							// 8B
		elemcnt = 8;
		elemsize = 1;
	} else if (size == 0 && Q == 1) {
		arrangement = 1;							// 16B
		elemcnt = 16;
		elemsize = 1;
	} else if (size == 1 && Q == 0) {
		arrangement = 2;							// 4H
		elemcnt = 4;
		elemsize = 2;
	} else if (size == 1 && Q == 1) {
		arrangement = 3;							// 8H
		elemcnt = 8;
		elemsize = 2;
	} else if (size == 2 && Q == 0) {
		arrangement = 4;							// 2S
		elemcnt = 2;
		elemsize = 4;
	} else if (size == 2 && Q == 1) {
		arrangement = 5;							// 4S
		elemcnt = 4;
		elemsize = 4;
	} else if (size == 3 && Q == 1) {
		arrangement = 6;							// 2D
		elemcnt = 2;
		elemsize = 8;
	}
	
	if (opcode == 2) {
		regcnt = 4;
	} else if (opcode == 6) {
		regcnt = 3;
	} else if (opcode == 7) {
		regcnt = 1;
	} else if (opcode == 10) {
		regcnt = 2;
	}
}

decode(SIMD_SHIFT_IMM)
{
	if (SCALAR) {
		shift_amount = ((immh << 3) | immb) - 64;
	} else {
		if (immh == 1 && Q == 0) {				// 8B
			arrangement = 0;
			shift_amount = ((immh << 3) | immb) - 8;
		} else if (immh == 1 && Q == 1) {		// 16B
			arrangement = 1;
			shift_amount = ((immh << 3) | immb) - 8;
		} else if ((immh & 0xe) == 2 && Q == 0) {	// 4H
			arrangement = 2;
			shift_amount = ((immh << 3) | immb) - 16;
		} else if ((immh & 0xe) == 2 && Q == 1) {	// 8H
			arrangement = 3;
			shift_amount = ((immh << 3) | immb) - 16;
		} else if ((immh & 0xc) == 4 && Q == 0) {	// 2S
			arrangement = 4;
			shift_amount = ((immh << 3) | immb) - 32;
		} else if ((immh & 0xc) == 4 && Q == 1) {	// 4S
			arrangement = 5;
			shift_amount = ((immh << 3) | immb) - 32;
		} else if ((immh & 0x8) == 8 && Q == 1) {	// 2D
			arrangement = 6;
			shift_amount = ((immh << 3) | immb) - 64;
		}
	}
}

decode(SIMD_MOD_IMM)
{
	uint64_t tmp = 0;
	tmp |= a << 7;
	tmp |= b << 6;
	tmp |= c << 5;
	tmp |= d << 4;
	tmp |= e << 3;
	tmp |= f << 2;
	tmp |= g << 1;
	tmp |= h << 0;
	
	switch ((cmode >> 1) & 7) {
	case 0:	immu64 = tmp << 32 | tmp; break;
	case 1:	immu64 = tmp << 40 | tmp << 8; break;
	case 2:	immu64 = tmp << 48 | tmp << 16; break;
	case 3:	immu64 = tmp << 56 | tmp << 24; break;
	case 4:	immu64 = tmp << 48 | tmp << 32 | tmp << 16 | tmp; break;
	case 5:	immu64 = tmp << 56 | tmp << 40 | tmp << 24 | tmp << 8; break;
	case 6:	
		if ((cmode & 1) == 0) {
			immu64 = 0x000000ff000000ff;
			immu64 |= (tmp << 40);
			immu64 |= (tmp << 8);
		} else {
			immu64 = 0x0000ffff0000ffff;
			immu64 |= (tmp << 48);
			immu64 |= (tmp << 16);
		}
		break;
	case 7:
		if (((cmode & 1) == 0) && op == 0) {
			immu64 = tmp << 56 | tmp << 48 | tmp << 40 | tmp << 32 | tmp << 24 | tmp << 16 | tmp << 8 | tmp;
		} else if (((cmode & 1) == 0) && op == 1) {
			immu64 = 0;
			immu64 |= (tmp & 0x80) ? 0xff00000000000000 : 0;
			immu64 |= (tmp & 0x40) ? 0x00ff000000000000 : 0;
			immu64 |= (tmp & 0x20) ? 0x0000ff0000000000 : 0;
			immu64 |= (tmp & 0x10) ? 0x000000ff00000000 : 0;
			immu64 |= (tmp & 0x08) ? 0x00000000ff000000 : 0;
			immu64 |= (tmp & 0x04) ? 0x0000000000ff0000 : 0;
			immu64 |= (tmp & 0x02) ? 0x000000000000ff00 : 0;
			immu64 |= (tmp & 0x01) ? 0x00000000000000ff : 0;
		} else if (((cmode & 1) == 1) && op == 0) {
			uint32_t tmp32 = a << 31;
			tmp32 |= (!b) << 30;
			tmp32 |= b ? 0x3e000000 : 0;
			tmp32 |= (tmp & 0x3f) << 19;
			
			immu64 = ((uint64_t)tmp32 << 32) | tmp32;
		} else if (((cmode & 1) == 1) && op == 1) {
			uint32_t tmp32 = a << 31;
			tmp32 |= (!b) << 30;
			tmp32 |= b ? 0x3fc00000 : 0;
			tmp32 |= (tmp & 0x3f) << 21;
			
			immu64 = ((uint64_t)tmp32 << 32);
		}
		break;
				
	/*case 15:
		if (op == 0) {
			uint32_t tmp32;
			tmp32 = (tmp & 0x80) << 5;
			tmp32 |= ((~tmp) & 0x40) << 5;
			if (tmp & 0x40) {
				tmp32 |= 0x1f << 6;
			}
			
			tmp32 |= (tmp & 0x3f);
			tmp32 <<= 19;
			
			immu64 = (uint64_t)tmp32 | ((uint64_t)tmp32 << 32);
		} else if (op == 1) {
			immu64 = (tmp & 0x80) << 8;
			immu64 |= ((~tmp) & 0x40) << 8;
			if (tmp & 0x40) {
				immu64 |= 0xff << 6;
			}
			
			immu64 |= (tmp & 0x3f);
			
			immu64 <<= 48;
		}
		
		break;*/
	}
}

decode(FP_IMM)
{
	immu64 = 0;
}

decode(CVT_FP_FXP)
{
	immu64 = 64 - scale;
}

decode(SIMD_THREE_DIFF)
{
	if (size == 0) {
		ta = 0;							// 8H
	} else if (size == 1) {
		ta = 1;							// 4S
	} else if (size == 2) {
		ta = 2;							// 2D
	} else if (size == 3) {
		ta = 3;							// 1Q
	}
	
	if (size == 0 && Q == 0) {
		tb = 0;							// 8B
	} else if (size == 0 && Q == 1) {
		tb = 1;							// 16B
	} else if (size == 1 && Q == 0) {
		tb = 2;							// 4H
	} else if (size == 1 && Q == 1) {
		tb = 3;							// 8H
	} else if (size == 2 && Q == 0) {
		tb = 4;							// 2S
	} else if (size == 2 && Q == 1) {
		tb = 5;							// 4S
	} else if (size == 3 && Q == 0) {
		tb = 6;							// 1D
	} else if (size == 3 && Q == 1) {
		tb = 7;							// 2D
	}
}

decode(SIMD_VECTOR_IDX)
{
	if (size == 1) {
		eindex = (H << 2) | (L << 1) | M;
		arrangement = Q ? 3 : 2;
		rmr = rm;
	} else if (size == 2) {
		eindex = (H << 1) | L;
		arrangement = Q ? 5 : 4;
		rmr = rm + (M ? 16 : 0);
	}
}

decode(SIMD_LS_SINGLE)
{
	if (opcode == 0) {
		eindex = Q << 3 | S << 2 | size;
	} else if (opcode == 2) {
		eindex = Q << 2 | S << 1 | (size >> 1);
	} else if (opcode == 4) {
		if (size == 0) {
			eindex = Q << 1 | S;
		} else {
			eindex = Q;
		}
	}
}
