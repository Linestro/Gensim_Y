AC_ISA(arm)
{
	ac_format neon_udf = "0xf:4 %undef:28";

	ac_format neon_1reg_imm = "0xf:4 0x1:3 %i:1 0x1:1 %D:1 0x0:3 %imm3:3 %vd:4 %cmode:4 0x0:1 %Q:1 %op:1 0x1:1 %imm4:4";

	ac_format neon_3reg = "0xf:4 0x1:3 %U:1 0x0:1 %D:1 %C:2 %vn:4 %vd:4 %A:4 %N:1 %Q:1 %M:1 %B:1 %vm:4";
	ac_format neon_2reg_shift = "0xf:4 0x1:3 %U:1 0x1:1 %D:1 %imm3:3 %op:3 %vd:4 %A:4 %L:1 %B:1 %M:1 0x1:1 %vm:4";
	ac_format neon_2reg_misc = "0xf:4 0x3:4 0x1:1 %D:1 0x3:2 %imm2:2 %A:2 %vd:4 0x0:1 %op1:2 %op:2 %Q:1 %M:1 0x0:1 %vm:4";
	ac_format neon_2reg_scalar = "0xf:4 0x1:3 %U:1 0x1:1 %Q:1 %B:2 %vn:4 %vd:4 %A:4 %N:1 0x1:1 %M:1 0x0:1 %vm:4";
	ac_format neon_2reg_scalar_vmul = "0xf:4 0x1:3 %Q:1 0x1:1 %D:1 %size:2 %vn:4 %vd:4 0x4:3 %F:1 %N:1 0x1:1 %M:1 0x0:1 %vm:4";

	ac_format neon_vext = "0xf:4 0x1:3 0x0:1 0x1:1 %D:1 0x3:2 %vn:4 %vd:4 %imm4:4 %N:1 %Q:1 %M:1 0x0:1 %vm:4";

	ac_format neon_scalar_arm = "%cond:4 0xe:4 %U:1 %opc1:2 %op:1 %vn:4 %rt:4 0xb:4 %N:1 %opc2:2 0x1:1 0x0:4";

	ac_format neon_memory_udf = "0xf:4 0x4:4 %A:1 %sz:1 %L:1 0x0:1 %rn:4 %vd:4 %B:4 %imm8:8";

	ac_format neon_memory_mul = "0xf:4 0x4:4 0x0:1 %D:1 %L:1 0x0:1 %rn:4 %vd:4 %type:4 %size:2 %align:2 %rm:4";
	ac_format neon_memory_sol = "0xf:4 0x4:4 0x1:1 %D:1 %L:1 0x0:1 %rn:4 %vd:4 %size:2 0x0:2 %index:4 %rm:4";
	ac_format neon_memory_sal = "0xf:4 0x4:4 0x1:1 %D:1 %L:1 0x0:1 %rn:4 %vd:4 0x3:2 0x0:2 %size:2 %T:1 %a:1 %rm:4";

	ac_format neon_vdup_core  = "%cond:4 0xe:4 0x1:1 %B:1 %Q:1 0x0:1 %vd:4 %rt:4 0xb:4 %D:1 0x0:1 %E:1 0x1:1 0x0:4";
	ac_format neon_vdup_scalar= "0xf:4 0x3:4 0x1:1 %D:1 0x3:2 %imm4:4 %vd:4 0xc:4 0x0:1 %Q:1 %M:1 0x0:1 %vm:4";

	//ac_instr<neon_udf> neon_undef;

	ac_instr<neon_1reg_imm> neon_vmov;
	ac_instr<neon_3reg> neon_vadd_sp, neon_vsub_sp, neon_vsub_i32, neon_vadd_i8, neon_vadd_i16, neon_vadd_i32, neon_vadd_i64, neon_vmul_sp, neon_vmla_sp, neon_vmls_sp, neon_vorr, neon_vmin_sp, neon_vmax_sp,neon_vpmin_sp, neon_vpmax_sp, neon_vcgt_sp, neon_veor, neon_vmul_i32, neon_vmul_i16, neon_vmul_i8;
	ac_instr<neon_2reg_shift> neon_vmovl, neon_vmovl_sx, neon_vcvt_fxp, neon_vshr, neon_vshl, neon_vsri, neon_vsli, neon_vrshrn;
	ac_instr<neon_2reg_misc> neon_vcvt_u_fp, neon_vcvt_s_fp, neon_vcvt_fp_u, neon_vcvt_fp_s, neon_vmovn, neon_vneg, neon_vrev32_8, neon_vzip, neon_vtrn_i16, neon_vtrn_i32;
	ac_instr<neon_2reg_scalar> neon_vmull_scalar, neon_vmlal_u32_scalar, neon_vmlal_s16_scalar,neon_vmlsl_s16_scalar;
	ac_instr<neon_2reg_scalar_vmul> neon_vmul_scalar_i16, neon_vmul_scalar_i32, neon_vmul_scalar_f32;
	ac_instr<neon_scalar_arm> neon_scalar_to_arm, neon_arm_to_scalar;
	ac_instr<neon_vext> neon_vext;
	
	ac_instr<neon_memory_udf> neon_memory_undef;
	ac_instr<neon_memory_mul> neon_memory_ld1_mul, neon_memory_ld2_mul, neon_memory_ld4_mul, neon_memory_st1_mul, neon_memory_st4_mul;
	ac_instr<neon_memory_sol> neon_memory_ld1_sol, neon_memory_st1_sol;
	ac_instr<neon_memory_sal> neon_memory_ld1_sal;
	
	ac_instr<neon_vdup_core> neon_vdup_core;
	ac_instr<neon_vdup_scalar> neon_vdup_scalar;

	//ac_behaviour neon_undef;

	ac_behaviour neon_vmov_i;
	
	ac_behaviour neon_vmovl;
	ac_behaviour neon_vmovl_sx;
	ac_behaviour neon_vcvt_fxp;
	ac_behaviour neon_vshl;
	ac_behaviour neon_vshr;
	ac_behaviour neon_vsli;
	ac_behaviour neon_vrshrn;
	ac_behaviour neon_vsri;
	
	ac_behaviour neon_vadd_sp;
	ac_behaviour neon_vsub_sp;
	ac_behaviour neon_vsub_i32;
	ac_behaviour neon_vadd_i8;
	ac_behaviour neon_vadd_i16;
	ac_behaviour neon_vadd_i32;
	ac_behaviour neon_vadd_i64;
	ac_behaviour neon_vmul_sp;
	ac_behaviour neon_vmul_i32;
	ac_behaviour neon_vmul_i16;
	ac_behaviour neon_vmul_i8;
	ac_behaviour neon_vmla_sp;
	ac_behaviour neon_vmls_sp;
	ac_behaviour neon_vorr;
	ac_behaviour neon_veor;
	ac_behaviour neon_vext;
	ac_behaviour neon_vmin_sp;
	ac_behaviour neon_vmax_sp;
	ac_behaviour neon_vpmin_sp;
	ac_behaviour neon_vpmax_sp;
	ac_behaviour neon_vcgt_sp;
	
	// 2reg_scalar
	ac_behaviour neon_vmull_scalar;
	ac_behaviour neon_vmlal_u32_scalar,neon_vmlal_s16_scalar,neon_vmlsl_s16_scalar;
	ac_behaviour neon_vmul_scalar_i16, neon_vmul_scalar_i32, neon_vmul_scalar_f32;
	
	ac_behaviour neon_vcvt_u_fp, neon_vcvt_s_fp, neon_vcvt_fp_u, neon_vcvt_fp_s, neon_vmovn, neon_vneg, neon_vrev32_8;
	ac_behaviour neon_vzip;
	ac_behaviour neon_vtrn_i16, neon_vtrn_i32;
	
	ac_behaviour neon_scalar_to_arm;
	ac_behaviour neon_arm_to_scalar;
	
	ac_behaviour neon_memory_undef;
	ac_behaviour neon_memory_ld1_mul;
	ac_behaviour neon_memory_ld2_mul;
	ac_behaviour neon_memory_ld4_mul;
	ac_behaviour neon_memory_ld1_sol;
	ac_behaviour neon_memory_ld1_sal;
	
	ac_behaviour neon_memory_st1_mul;
	ac_behaviour neon_memory_st4_mul;
	ac_behaviour neon_memory_st1_sol;

	ac_behaviour neon_vdup_core;
	ac_behaviour neon_vdup_scalar;

	ac_asm_map qreg
	{
		"q"[0..32] = [0..32];
	}

	ISA_CTOR(armv7a)
	{
		ac_execute("execute.neon");
		ac_decode("decode.neon");
		
		//neon_undef.set_decoder();
		//neon_undef.set_behaviour(neon_undef);
		
		// 2reg_scalar "0xf:4 0x1:3 %U:1 0x1:1 %Q:1 %B:2 %vn:4 %vd:4 %A:4 %N:1 0x1:1 %M:1 0x0:1 %vm:4";
		neon_vmull_scalar.set_decoder(A=0xa);
		neon_vmull_scalar.set_asm("vmull");
		neon_vmull_scalar.set_behaviour(neon_vmull_scalar);
		
		neon_vmlal_u32_scalar.set_decoder(U=1, B=2, A=2);
		neon_vmlal_u32_scalar.set_asm("vmlal.u32");
		neon_vmlal_u32_scalar.set_behaviour(neon_vmlal_u32_scalar);
		
		neon_vmlal_s16_scalar.set_decoder(U=0, B=1, A=2);
		neon_vmlal_s16_scalar.set_asm("vmlal.s16");
		neon_vmlal_s16_scalar.set_behaviour(neon_vmlal_s16_scalar);
		
		neon_vmlsl_s16_scalar.set_decoder(U=0, B=1, A=6);
		neon_vmlsl_s16_scalar.set_asm("vmlsl.s16");
		neon_vmlsl_s16_scalar.set_behaviour(neon_vmlsl_s16_scalar);
		
		//ac_format neon_2reg_scalar_vmul = "0xf:4 0x1:3 %Q:1 0x1:1 %D:1 %size:2 %vn:4 %vd:4 %0x4:3 %F:1 %N:1 0x1:1 %M:1 0x0:1 %vm:4";
		//ac_behaviour noen_vmul_scalar_i16, noen_vmul_scalar_i32, noen_vmul_scalar_f32;
		neon_vmul_scalar_i16.set_decoder(size=1, F=0);
		neon_vmul_scalar_i16.set_asm("vmul_scalar");
		neon_vmul_scalar_i16.set_behaviour(neon_vmul_scalar_i16);
		
		neon_vmul_scalar_i32.set_decoder(size=2, F=0);
		neon_vmul_scalar_i32.set_asm("vmul_scalar");
		neon_vmul_scalar_i32.set_behaviour(neon_vmul_scalar_i32);
		
		neon_vmul_scalar_f32.set_decoder(size=2, F=1);
		neon_vmul_scalar_f32.set_asm("vmul_scalar");
		neon_vmul_scalar_f32.set_behaviour(neon_vmul_scalar_f32);
		
		// ac_format neon_2reg_misc = "0xf:4 0x3:4 0x1:1 %D:1 0x3:2 %imm2:2 %A:2 %vd:4 0x0:1 %op1:2 %op:2 %Q:1 %M:1 0x0:1 %vm:4";
		// imm2 = size
		// A = 0x3
		// op = op
		// op1 = 0x3
		// B = (op1 : op : Q)
		
		neon_vcvt_fp_s.set_decoder(A=3, imm2=2, op1=3, op=0);
		neon_vcvt_fp_s.set_asm("vcvt.f32.s32");
		neon_vcvt_fp_s.set_behaviour(neon_vcvt_fp_s);
		
		neon_vcvt_fp_u.set_decoder(A=3, imm2=2, op1=3, op=1);
		neon_vcvt_fp_u.set_asm("vcvt.f32.u32");
		neon_vcvt_fp_u.set_behaviour(neon_vcvt_fp_u);
		
		neon_vcvt_s_fp.set_decoder(A=3, imm2=2, op1=3, op=2);
		neon_vcvt_s_fp.set_asm("vcvt.s32.f32");
		neon_vcvt_s_fp.set_behaviour(neon_vcvt_s_fp);
		
		neon_vcvt_u_fp.set_decoder(A=3, imm2=2, op1=3, op=3);
		neon_vcvt_u_fp.set_asm("vcvt.u32.f32");
		neon_vcvt_u_fp.set_behaviour(neon_vcvt_u_fp);
		
		neon_vmovn.set_decoder(A=2, op1=1, op=0, Q=0);
		neon_vmovn.set_asm("vmovn");
		neon_vmovn.set_behaviour(neon_vmovn);
		
		neon_vneg.set_decoder(A=1, op1=3, op=3);
		neon_vneg.set_asm("vneg");
		neon_vneg.set_behaviour(neon_vneg);

		neon_vrev32_8.set_decoder(A=0, op1=0, op=1, imm2=0);
		neon_vrev32_8.set_asm("vrev32.8");
		neon_vrev32_8.set_behaviour(neon_vrev32_8);
		
		neon_vzip.set_decoder(A=2, op1=0, op=3);
		neon_vzip.set_asm("vzip");
		neon_vzip.set_behaviour(neon_vzip);
		
		neon_vtrn_i16.set_decoder(A=2, op1=0, op=1, imm2=1);
		neon_vtrn_i16.set_asm("vtrn.i16");
		neon_vtrn_i16.set_behaviour(neon_vtrn_i16);
		
		neon_vtrn_i32.set_decoder(A=2, op1=0, op=1, imm2=2);
		neon_vtrn_i32.set_asm("vtrn.i32");
		neon_vtrn_i32.set_behaviour(neon_vtrn_i32);
		
		//ac_format neon_2reg_shift = "0xf:4 0x1:3 %U:1 0x1:1 %D:1 %imm3:3 %op:3 %vd:4 %A:4 %L:1 %B:1 %M:1 0x1:1 %vm:4";

		neon_vmovl.set_decoder(op=0, A=10, B=0, L=0, U=1, imm3=1);
		neon_vmovl.set_decoder(op=0, A=10, B=0, L=0, U=1, imm3=2);
		neon_vmovl.set_decoder(op=0, A=10, B=0, L=0, U=1, imm3=4);
		neon_vmovl.set_asm("vmovl");
		neon_vmovl.set_behaviour(neon_vmovl);
		
		neon_vmovl_sx.set_decoder(op=0, A=10, B=0, L=0, U=0, imm3=1);
		neon_vmovl_sx.set_decoder(op=0, A=10, B=0, L=0, U=0, imm3=2);
		neon_vmovl_sx.set_decoder(op=0, A=10, B=0, L=0, U=0, imm3=4);
		neon_vmovl_sx.set_asm("vmovl.s");
		neon_vmovl_sx.set_behaviour(neon_vmovl_sx);
		
		neon_vcvt_fxp.set_decoder(A&14, L=0);
		neon_vcvt_fxp.set_asm("vcvt");
		neon_vcvt_fxp.set_behaviour(neon_vcvt_fxp);
		
		neon_vshl.set_decoder(A=5, U=0);
		neon_vshl.set_asm("vshl");
		neon_vshl.set_behaviour(neon_vshl);
		
		neon_vshr.set_decoder(A=0);
		neon_vshr.set_asm("vshr");
		neon_vshr.set_behaviour(neon_vshr);
		
		neon_vsli.set_decoder(A=5, U=1);
		neon_vsli.set_asm("vsli");
		neon_vsli.set_behaviour(neon_vsli);
		
		neon_vrshrn.set_decoder(A=8, U=0, B=1, L=0);
		neon_vrshrn.set_asm("vrshrn");
		neon_vrshrn.set_behaviour(neon_vrshrn);
		
		neon_vsri.set_decoder(A=4, U=1);
		neon_vsri.set_asm("vsri");
		neon_vsri.set_behaviour(neon_vsri);
		
		neon_vmov.set_decoder(op=0, cmode ^ 1);
		neon_vmov.set_decoder(op=0, cmode = 13);
		neon_vmov.set_decoder(op=0, cmode = 15);
		neon_vmov.set_decoder(op=1, cmode = 14);
		neon_vmov.set_asm("vmov");
		neon_vmov.set_behaviour(neon_vmov_i);
		
		neon_vorr.set_decoder(A=1, B=1, U=0, C=2);
		neon_vorr.set_asm("vorr");
		neon_vorr.set_behaviour(neon_vorr);
		
		neon_veor.set_decoder(A=1, B=1, U=1, C=0);
		neon_veor.set_asm("veor");
		neon_veor.set_behaviour(neon_veor);
		
		neon_vext.set_decoder();
		neon_vext.set_asm("vext");
		neon_vext.set_behaviour(neon_vext);
		
		neon_vmin_sp.set_decoder(A=15, B=0, U=0,C=2);
		neon_vmin_sp.set_asm("vmin");
		neon_vmin_sp.set_behaviour(neon_vmin_sp);
		
		neon_vmax_sp.set_decoder(A=15, B=0, U=0,C=0);
		neon_vmax_sp.set_asm("vmax");
		neon_vmax_sp.set_behaviour(neon_vmax_sp);
		
		neon_vpmin_sp.set_decoder(A=15, B=0, U=1,C=2);
		neon_vpmin_sp.set_asm("vpmin");
		neon_vpmin_sp.set_behaviour(neon_vpmin_sp);
		
		neon_vpmax_sp.set_decoder(A=15, B=0, U=1,C=0);
		neon_vpmax_sp.set_asm("vpmax");
		neon_vpmax_sp.set_behaviour(neon_vpmax_sp);
		
		// ac_format neon_3reg = "0xf:4 0x1:3 %U:1 0x0:1 %D:1 %C:2 %vn:4 %vd:4 %A:4 %N:1 %Q:1 %M:1 %B:1 %vm:4";
		
		neon_vcgt_sp.set_decoder(A=0xe, B=0, U=1, C=2);
		neon_vcgt_sp.set_asm("vcgt");
		neon_vcgt_sp.set_behaviour(neon_vcgt_sp);
		
		neon_vadd_sp.set_decoder(A=0xd, B=0, U=0, C=0);
		neon_vadd_sp.set_asm("vadd.f32 %dreg, %dreg, %dreg", vd, vn, vm, Q=0);
		neon_vadd_sp.set_asm("vadd.f32 %qreg, %qreg, %qreg", vd, vn, vm, Q=1);
		neon_vadd_sp.set_behaviour(neon_vadd_sp);
		
		neon_vsub_sp.set_decoder(A=0xd, B=0, U=0, C=2);
		neon_vsub_sp.set_asm("vsub.f32 %dreg, %dreg, %dreg", vd, vn, vm, Q=0);
		neon_vsub_sp.set_asm("vsub.f32 %qreg, %qreg, %qreg", vd, vn, vm, Q=1);
		neon_vsub_sp.set_behaviour(neon_vsub_sp);
		
		neon_vsub_i32.set_decoder(A=0x8, B=0, U=1, C=2);
		neon_vsub_i32.set_asm("vsub.i32 %dreg, %dreg, %dreg", vd, vn, vm, Q=0);
		neon_vsub_i32.set_asm("vsub.i32 %qreg, %qreg, %qreg", vd, vn, vm, Q=1);
		neon_vsub_i32.set_behaviour(neon_vsub_i32);
		
		neon_vadd_i8.set_decoder(A=0x8, B=0, U=0, C=0);
		neon_vadd_i8.set_asm("vadd.i8 %dreg, %dreg, %dreg", vd, vn, vm, Q=0);
		neon_vadd_i8.set_asm("vadd.i8 %qreg, %qreg, %qreg", vd, vn, vm, Q=1);
		neon_vadd_i8.set_behaviour(neon_vadd_i8);
		
		neon_vadd_i16.set_decoder(A=0x8, B=0, U=0, C=1);
		neon_vadd_i16.set_asm("vadd.i16 %dreg, %dreg, %dreg", vd, vn, vm, Q=0);
		neon_vadd_i16.set_asm("vadd.i16 %qreg, %qreg, %qreg", vd, vn, vm, Q=1);
		neon_vadd_i16.set_behaviour(neon_vadd_i16);
		
		neon_vadd_i32.set_decoder(A=0x8, B=0, U=0, C=2);
		neon_vadd_i32.set_asm("vadd.i32 %dreg, %dreg, %dreg", vd, vn, vm, Q=0);
		neon_vadd_i32.set_asm("vadd.i32 %qreg, %qreg, %qreg", vd, vn, vm, Q=1);
		neon_vadd_i32.set_behaviour(neon_vadd_i32);
		
		neon_vadd_i64.set_decoder(A=0x8, B=0, U=0, C=3);
		neon_vadd_i64.set_asm("vadd.i64 %dreg, %dreg, %dreg", vd, vn, vm, Q=0);
		neon_vadd_i64.set_asm("vadd.i64 %qreg, %qreg, %qreg", vd, vn, vm, Q=1);
		neon_vadd_i64.set_behaviour(neon_vadd_i64);
		
		neon_vmul_sp.set_decoder(A=0xd, B=1, U=1, C=0);
		neon_vmul_sp.set_asm("vmul.f32 %dreg, %dreg, %dreg", vd, vn, vm, Q=0);
		neon_vmul_sp.set_asm("vmul.f32 %qreg, %qreg, %qreg", vd, vn, vm, Q=1);
		neon_vmul_sp.set_behaviour(neon_vmul_sp);
		
		neon_vmul_i32.set_decoder(A=0x9, B=1, C=2);
		neon_vmul_i32.set_asm("vmul.i32 %dreg, %dreg, %dreg", vd, vn, vm, Q=0);
		neon_vmul_i32.set_asm("vmul.i32 %qreg, %qreg, %qreg", vd, vn, vm, Q=1);
		neon_vmul_i32.set_behaviour(neon_vmul_i32);
				
		neon_vmul_i16.set_decoder(A=0x9, B=1, C=1);
		neon_vmul_i16.set_asm("vmul.i32 %dreg, %dreg, %dreg", vd, vn, vm, Q=0);
		neon_vmul_i16.set_asm("vmul.i32 %qreg, %qreg, %qreg", vd, vn, vm, Q=1);
		neon_vmul_i16.set_behaviour(neon_vmul_i16);
				
		neon_vmul_i8.set_decoder(A=0x9, B=1, C=0);
		neon_vmul_i8.set_asm("vmul.i32 %dreg, %dreg, %dreg", vd, vn, vm, Q=0);
		neon_vmul_i8.set_asm("vmul.i32 %qreg, %qreg, %qreg", vd, vn, vm, Q=1);
		neon_vmul_i8.set_behaviour(neon_vmul_i8);
				
		neon_vmla_sp.set_decoder(A=0xd, B=1, U=0, C=0);
		neon_vmla_sp.set_asm("vmla.f32 %dreg, %dreg, %dreg", vd, vn, vm, Q=0);
		neon_vmla_sp.set_asm("vmla.f32 %qreg, %qreg, %qreg", vd, vn, vm, Q=1);
		neon_vmla_sp.set_behaviour(neon_vmla_sp);
				
		neon_vmls_sp.set_decoder(A=0xd, B=1, U=0, C=2);
		neon_vmls_sp.set_asm("vmls.f32 %dreg, %dreg, %dreg", vd, vn, vm, Q=0);
		neon_vmls_sp.set_asm("vmls.f32 %qreg, %qreg, %qreg", vd, vn, vm, Q=1);
		neon_vmls_sp.set_behaviour(neon_vmls_sp);
				
		// ac_format neon_scalar_arm = "%cond:4 0xe:4 %U:1 %opc1:2 %op:1 %vn:4 %rt:4 0xb:4 %N:1 %opc2:2 0x1:1 0x0:4";

		//x1xxx
		neon_scalar_to_arm.set_decoder(op=1, opc1 & 2);
		//x0xx1
		neon_scalar_to_arm.set_decoder(op=1, opc1 ^ 2, opc2 & 1);
		//00x00
		neon_scalar_to_arm.set_decoder(U=0, op=1, opc1 ^ 2, opc2 = 0);
		
		neon_scalar_to_arm.set_asm("vmov%cond.8 %reg, %dreg[%imm]", cond, rt, vn, imm8, opc1=2);
		neon_scalar_to_arm.set_asm("vmov%cond.8 %reg, %dreg[%imm]", cond, rt, vn, imm8, opc1=3);
		neon_scalar_to_arm.set_asm("vmov%cond.16 %reg, %dreg[%imm]", cond, rt, vn, imm8, opc1=0);
		neon_scalar_to_arm.set_asm("vmov%cond.16 %reg, %dreg[%imm]", cond, rt, vn, imm8, opc1=1);
		neon_scalar_to_arm.set_asm("vmov%cond %reg, %dreg[%imm]", cond, rt, vn, imm8);
		neon_scalar_to_arm.set_behaviour(neon_scalar_to_arm);
		
		//1xxx		
		neon_arm_to_scalar.set_decoder(U=0, op=0, opc1 & 2);
		//0xx1
		neon_arm_to_scalar.set_decoder(U=0, op=0, opc1 ^ 2, opc2 & 1);
		neon_arm_to_scalar.set_decoder(U=0, op=0, opc1 ^ 2, opc2 = 0);
		
		neon_arm_to_scalar.set_asm("vmov%cond %dreg[%imm], %reg", cond, vn, imm8, rt);
		neon_arm_to_scalar.set_behaviour(neon_arm_to_scalar);
		
		neon_memory_undef.set_decoder();
		neon_memory_undef.set_asm("undef");
		neon_memory_undef.set_behaviour(neon_memory_undef);
		
		neon_memory_ld1_mul.set_decoder(L=1,type=0x2);
		neon_memory_ld1_mul.set_decoder(L=1,type=0x6);
		neon_memory_ld1_mul.set_decoder(L=1,type=0x7);
		neon_memory_ld1_mul.set_decoder(L=1,type=0xa);
		neon_memory_ld1_mul.set_asm("vld1");
		neon_memory_ld1_mul.set_behaviour(neon_memory_ld1_mul);
				
		neon_memory_ld1_sol.set_decoder(L=1);
		neon_memory_ld1_sol.set_asm("vld1");
		neon_memory_ld1_sol.set_behaviour(neon_memory_ld1_sol);
		
		neon_memory_ld1_sal.set_decoder(L=1);
		neon_memory_ld1_sal.set_asm("vld1");
		neon_memory_ld1_sal.set_behaviour(neon_memory_ld1_sal);

		neon_memory_ld2_mul.set_decoder(L=1,type=0x3);
		neon_memory_ld2_mul.set_decoder(L=1,type=0x8);
		neon_memory_ld2_mul.set_decoder(L=1,type=0x9);
		neon_memory_ld2_mul.set_asm("vld2");
		neon_memory_ld2_mul.set_behaviour(neon_memory_ld2_mul);		
		
		neon_memory_ld4_mul.set_decoder(L=1,type=0x0);
		neon_memory_ld4_mul.set_decoder(L=1,type=0x1);
		neon_memory_ld4_mul.set_asm("vld4");
		neon_memory_ld4_mul.set_behaviour(neon_memory_ld4_mul);	
		
		neon_memory_st1_mul.set_decoder(L=0,type=0x2);
		neon_memory_st1_mul.set_decoder(L=0,type=0x6);
		neon_memory_st1_mul.set_decoder(L=0,type=0x7);
		neon_memory_st1_mul.set_decoder(L=0,type=0xa);
		neon_memory_st1_mul.set_asm("vst1.mul");
		neon_memory_st1_mul.set_behaviour(neon_memory_st1_mul);

		neon_memory_st1_sol.set_decoder(L=0);
		neon_memory_st1_sol.set_asm("vst1.sol");
		neon_memory_st1_sol.set_behaviour(neon_memory_st1_sol);
		
		neon_memory_st4_mul.set_decoder(L=0,type=0x0);
		neon_memory_st4_mul.set_decoder(L=0,type=0x1);
		neon_memory_st4_mul.set_asm("vst4");
		neon_memory_st4_mul.set_behaviour(neon_memory_st4_mul);	

//ac_format neon_vdup_core  = "%cond:4 0xe:4 0x1:1 %B:1 %Q:1 0x0:1 %vd:4 %rt:4 0xb:4 %D:1 0x0:1 %E:1 0x1:1 0x0:4";
		
		neon_vdup_core.set_decoder(B=0, E=0, Q=0);
		neon_vdup_core.set_decoder(B=0, E=1, Q=0);
		neon_vdup_core.set_decoder(B=1, E=0, Q=0);
		neon_vdup_core.set_decoder(B=0, E=0, Q=1, vd ^ 1);
		neon_vdup_core.set_decoder(B=0, E=1, Q=1, vd ^ 1);
		neon_vdup_core.set_decoder(B=1, E=0, Q=1, vd ^ 1);
		neon_vdup_core.set_decoder();
		neon_vdup_core.set_asm("vdup %qreg, %reg", vd, rt, Q=1);
		neon_vdup_core.set_asm("vdup %dreg, %reg", vd, rt, Q=0);
		neon_vdup_core.set_behaviour(neon_vdup_core);

//ac_format neon_vdup_scalar= "0xf:4 0x3:4 0x1:1 %D:1 0x3:2 %imm4:4 %vd:4 0xc:4 0x0:1 %Q:1 %M:1 0x0:1 %vm:4";
		
		neon_vdup_scalar.set_decoder(imm4 != 0, imm4 != 8);
		neon_vdup_scalar.set_asm("vdup %qreg, %dreg [%imm]", vd, vm, imm4, Q=1);
		neon_vdup_scalar.set_asm("vdup %dreg, %dreg [%imm]", vd, vm, imm4, Q=0);
		neon_vdup_scalar.set_behaviour(neon_vdup_scalar);
	};
};
